#!/usr/bin/env python

# Import library
import os
import sys
import json
import re
import time
import subprocess

# Declare function
def parser_request_info():
    data = ""
    if os.environ['CONTENT_LENGTH'] != "":
        data = json.loads(sys.stdin.read())
    return {
        'REQUEST_URI': os.environ['REQUEST_URI'],
        'REQUEST_METHOD': os.environ['REQUEST_METHOD'],
        'SCRIPT_FILENAME': os.environ['SCRIPT_FILENAME'],
        'SCRIPT_NAME': os.environ['SCRIPT_NAME'],
        'QUERY_STRING': os.environ['QUERY_STRING'],
        'CONTENT_TYPE': os.environ['CONTENT_TYPE'],
        'CONTENT_LENGTH': os.environ['CONTENT_LENGTH'],
        'CONTENT': data
    }

def parser_restful_info(url):
    # Regex for get the related fields from URL
    url_pattern = r'/(?P<api>\w+)(?P<cmd>\/?\w*)(?P<op>.*)$'
    return re.match(url_pattern, url).groupdict()

def response(status, info):
    print("Content-type: application/json")
    print("")
    #print(json.dumps(info['req']))
    #print(json.dumps(info['restful']))
    print("")
    if info['restful'] != None and info['restful']['api'] != None and info['restful']['cmd'] != None:
        c = info['restful']['cmd'].replace("/", "")
        o = info['restful']['op'].replace("/", " ") if info['restful']['op'] != None else ""
        t = time.time()
        #print("asa --disable-color {0}{1} > /tmp/{2}.asa".format(c, o, t))
        subprocess.run(["asa --disable-color {0}{1} > /tmp/{2}.asa".format(c, o, t)], shell=True)
        f = open("/tmp/{0}.asa".format(t), "r")
        print(f.read())
        subprocess.run(["rm /tmp/{0}.asa".format(t)], shell=True)
    else:
        print("Input parameter error.")

# Execute script
try:
    req = parser_request_info()
    info = {
        "restful": parser_restful_info(req["SCRIPT_NAME"]),
        "req": req
    }
    response("success", info)
except Exception as e:
    print("Content-type: application/json")
    print("")
    print(e.args[0])
